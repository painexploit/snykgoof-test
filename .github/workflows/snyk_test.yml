name: Example workflow for Node using Snyk
on: push
jobs:
  security:
    runs-on: ubuntu-latest
    steps:
      - uses: actions/checkout@master
      - name: Run Snyk to check for vulnerabilities
        uses: snyk/actions/node@master
        continue-on-error: true
        env:
          SNYK_TOKEN: ${{ secrets.SNYK_TOKEN }}
        with:
          command: code test
          args: --sarif-file-output=snyk.sarif
      - name: Calculate and save vulnerability details
        run: |
          echo "Parsing Snyk SARIF output..."
          total_vulnerabilities=$(jq '[.runs[].results[]] | length' snyk.sarif)
          echo "RESULTS_LENGTH=$total_vulnerabilities" >> $GITHUB_ENV
          high_vulnerabilities=$(jq '[.runs[].results[] | select(.level=="error")] | length' snyk.sarif)
          medium_vulnerabilities=$(jq '[.runs[].results[] | select(.level=="warning")] | length' snyk.sarif)
          low_vulnerabilities=$(jq '[.runs[].results[] | select(.level=="note")] | length' snyk.sarif)
          high_vulnerability_details=$(jq -r '.runs[].tool.driver.rules[] | select(.defaultConfiguration.level == "error") | .shortDescription.text' snyk.sarif)
          medium_vulnerability_details=$(jq -r '.runs[].tool.driver.rules[] | select(.defaultConfiguration.level == "warning") | .shortDescription.text' snyk.sarif)
          low_vulnerability_details=$(jq -r '.runs[].tool.driver.rules[] | select(.defaultConfiguration.level == "note") | .shortDescription.text' snyk.sarif)
          
      - name: details
        run: |
          #!/bin/bash
          # Define the SARIF file
          sarif_file="snyk.sarif"
          # Retrieve the descriptions dynamically and store them in an array
          mapfile -t descriptions < <(jq -r '.runs[].tool.driver.rules[].shortDescription.text' snyk.sarif)
          # Print the header
          echo "index,shortDescription.text,artifactlocationuri,startline"
          # Extract the required fields and print to the terminal
          for index in "${!descriptions[@]}"; do
            result=$(jq --arg index "$index" --arg desc "${descriptions[$index]}" -r \
              '.runs[].results[] | select(.ruleIndex == ($index|tonumber)) | "\($desc),\(.locations[].physicalLocation.artifactLocation.uri),\(.locations[].physicalLocation.region.startLine)"' \
              "$sarif_file")
            details+="$result\n"
          done
          echo "$details" > details.txt
      
      - name: Send Snyk details to Slack
        run: |
          details=$(cat details.txt)
          echo "Sending notification to Slack..."
          curl -X POST -H 'Content-type: application/json' --data '{
            "text": "Snyk Vulnerability Report Details:\n\n'"$details"'"
          }' ${{ secrets.SLACK_WEBHOOK_URL }}
